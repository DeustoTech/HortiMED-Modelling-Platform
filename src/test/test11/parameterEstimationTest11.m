function [pOpt, Info] = parameterEstimationTest11(p)
%PARAMETERESTIMATIONTEST11
%
% Solve a parameter estimation problem for the test11 model.
%
% The function returns estimated parameter values, pOpt,
% and estimation termination information, Info.
%
% The input argument, p, defines the model parameters to estimate,
% if omitted the parameters specified in the function body are estimated.
%
% Modify the function to include or exclude new experiments, or
% to change the estimation options.
%
% Auto-generated by SPETOOL on 25-Mar-2022 12:30:19.
%

%% Open the model.
open_system('test11')

%% Specify Model Parameters to Estimate
%
if nargin < 1
    p = [];
end

%% Define the Estimation Experiments
%

Exp = sdo.Experiment('test11');

%%
% Specify the experiment input data used to generate the output.
Exp_Sig_Input_1 = Simulink.SimulationData.Signal;
Exp_Sig_Input_1.Values    = getData('Exp_Sig_Input_1_Value');
Exp_Sig_Input_1.BlockPath = 'test11/Windows';
Exp_Sig_Input_1.PortType  = 'outport';
Exp_Sig_Input_1.PortIndex = 1;
Exp_Sig_Input_1.Name      = 'Windows';
Exp_Sig_Input_2 = Simulink.SimulationData.Signal;
Exp_Sig_Input_2.Values    = getData('Exp_Sig_Input_2_Value');
Exp_Sig_Input_2.BlockPath = 'test11/Text';
Exp_Sig_Input_2.PortType  = 'outport';
Exp_Sig_Input_2.PortIndex = 1;
Exp_Sig_Input_2.Name      = 'Text';
Exp_Sig_Input_3 = Simulink.SimulationData.Signal;
Exp_Sig_Input_3.Values    = getData('Exp_Sig_Input_3_Value');
Exp_Sig_Input_3.BlockPath = 'test11/Rad';
Exp_Sig_Input_3.PortType  = 'outport';
Exp_Sig_Input_3.PortIndex = 1;
Exp_Sig_Input_3.Name      = 'Rad';
Exp_Sig_Input_4 = Simulink.SimulationData.Signal;
Exp_Sig_Input_4.Values    = getData('Exp_Sig_Input_4_Value');
Exp_Sig_Input_4.BlockPath = 'test11/HRext';
Exp_Sig_Input_4.PortType  = 'outport';
Exp_Sig_Input_4.PortIndex = 1;
Exp_Sig_Input_4.Name      = 'HRext';
Exp_Sig_Input_5 = Simulink.SimulationData.Signal;
Exp_Sig_Input_5.Values    = getData('Exp_Sig_Input_5_Value');
Exp_Sig_Input_5.BlockPath = 'test11/Wind';
Exp_Sig_Input_5.PortType  = 'outport';
Exp_Sig_Input_5.PortIndex = 1;
Exp_Sig_Input_5.Name      = 'Wind';
Exp.InputData = [Exp_Sig_Input_1; Exp_Sig_Input_2; Exp_Sig_Input_3; Exp_Sig_Input_4; Exp_Sig_Input_5];

%%
% Specify the measured experiment output data.
Exp_Sig_Output_1 = Simulink.SimulationData.Signal;
Exp_Sig_Output_1.Values    = getData('Exp_Sig_Output_1_Value');
Exp_Sig_Output_1.BlockPath = 'test11/Subsystem';
Exp_Sig_Output_1.PortType  = 'outport';
Exp_Sig_Output_1.PortIndex = 1;
Exp_Sig_Output_1.Name      = 'T';
Exp_Sig_Output_2 = Simulink.SimulationData.Signal;
Exp_Sig_Output_2.Values    = getData('Exp_Sig_Output_2_Value');
Exp_Sig_Output_2.BlockPath = 'test11/Subsystem';
Exp_Sig_Output_2.PortType  = 'outport';
Exp_Sig_Output_2.PortIndex = 2;
Exp_Sig_Output_2.Name      = 'HRInt';
Exp.OutputData = [Exp_Sig_Output_1; Exp_Sig_Output_2];

%%
% Specify experiment specific parameters.
Param = sdo.getParameterFromModel('test11',{'params.AR','params.T_ss','params.minWindows','params.A_f','params.cd_c','params.A_c','params.alpha_i'});
Param(1).Minimum = 0;
Param(1).Maximum = 200;
Param(1).Scale = 8;
Param(2).Minimum = 280;
Param(2).Maximum = 295;
Param(3).Minimum = 0.01;
Param(3).Maximum = 0.5;
Param(3).Scale = 0.125;
Param(4).Minimum = 3100;
Param(4).Maximum = 3300;
Param(5).Minimum = 7000;
Param(5).Maximum = 9000;
Param(6).Minimum = 3100;
Param(6).Maximum = 3300;
Param(7).Minimum = 0.01;
Param(7).Maximum = 0.3;
Exp.Parameters = Param;

%%
% Create a model simulator from an experiment
Simulator = createSimulator(Exp);
%%
% Add experiment specific parameters/states to the list of parameters
% to estimate.
s = getValuesToEstimate(Exp);
p = [p; s];

%% Create Estimation Objective Function
%
% Create a function that is called at each optimization iteration
% to compute the estimation cost.
%
% Use an anonymous function with one argument that calls test11_optFcn.
optimfcn = @(P) test11_optFcn(P,Simulator,Exp);

%% Optimization Options
%
% Specify optimization options.
Options = sdo.OptimizeOptions;
Options.Method = 'lsqnonlin';
Options.OptimizedModel = Simulator;

%% Estimate the Parameters
%
% Call sdo.optimize with the estimation objective function handle,
% parameters to estimate, and options.
[pOpt,Info] = sdo.optimize(optimfcn,p,Options);

%%
% Update the experiments with the estimated parameter values.
Exp = setEstimatedValues(Exp,pOpt);

%% Update Model
%
% Update the model with the optimized parameter values.
sdo.setValueInModel('test11',pOpt(1:0));
end

function Vals = test11_optFcn(P,Simulator,Exp)
%TEST11_OPTFCN
%
% Function called at each iteration of the estimation problem.
%
% The function is called with a set of parameter values, P, and returns
% the estimation cost, Vals, to the optimization solver.
%
% See the sdoExampleCostFunction function and sdo.optimize for a more
% detailed description of the function signature.
%

%%
% Define a signal tracking requirement to compute how well the model
% output matches the experiment data.
r = sdo.requirements.SignalTracking(...
    'Method', 'Residuals');
%%
% Update the experiment(s) with the estimated parameter values.
Exp = setEstimatedValues(Exp,P);

%%
% Simulate the model and compare model outputs with measured experiment
% data.

F_r = [];
Simulator = createSimulator(Exp,Simulator);
strOT = mat2str(Exp.OutputData(1).Values.Time);
Simulator = sim(Simulator, 'OutputOption', 'AdditionalOutputTimes', 'OutputTimes', strOT);

SimLog = find(Simulator.LoggedData,get_param('test11','SignalLoggingName'));
for ctSig=1:numel(Exp.OutputData)
    Sig = find(SimLog,Exp.OutputData(ctSig).Name);
    
    Error = evalRequirement(r,Sig.Values,Exp.OutputData(ctSig).Values);
    F_r = [F_r; Error(:)];
end

%% Return Values.
%
% Return the evaluated estimation cost in a structure to the
% optimization solver.
Vals.F = F_r;
end

function Data = getData(DataID)
%GETDATA
%
% Helper function to store data used by parameterEstimation_test11.
%
% The input, DataID, specifies the name of the data to retrieve. The output,
% Data, contains the requested data.
%

SaveData = load('parameterEstimation_test11_Data');
Data = SaveData.Data.(DataID);
end
